level-1

Правила игры:

Игрок управляет движением змейки, которая ползает по квадратному полю: вверх, вниз, вправо и влево.
Остановить движение змейки нельзя.
Цель игры — съесть как можно большее количество яблок, которые появляются поочередно, в случайном месте игрового поля,
как только змейка "проглотит" предыдущее.
С каждым новым яблоком змейка растет на один сегмент (занимает на одну ячейку больше). В нашей игре на старте змейка
занимает три ячейки (имеет три сегмента) и может дорасти до 28.
По мере того, как растет змейка, скорость игры увеличивается.
Змейка не может проходить "сквозь себя" или выходить за пределы игрового поля.
Игра оканчивается победой, если длина змейки увеличилась до 28 сегментов.
Игра оканчивается проигрышем, если касается сама себя или края поля.
Теперь приступаем к реализации игры:

Нам понадобится класс, который будет содержать логику игры. Назовем его SnakeGame.

Не забудь унаследовать его от класса Game.

Этот и другие классы "игрового движка" находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться,
 класс SnakeGame должен содержать такой импорт:
import com.javarush.engine.cell.*;

Если ты все сделал правильно, уже можно запустить SnakeGame и увидеть пустое игровое поле.

Теперь создай переменные для хранения ширины и высоты игрового поля.
Переопредели метод родительского класса public void initialize(): он будет содержать команды, которые выполнятся один
раз при запуске игры. Например, установка размеров игрового поля.
Также, советуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.

Требования:
•	Должен существовать публичный класс SnakeGame.
•	Класс SnakeGame должен быть наследником класса Game.
•	В классе SnakeGame должно существовать поле public static final int WIDTH, инициализированное при объявлении
значением 15.
•	В классе SnakeGame должно существовать поле public static final int HEIGHT, инициализированное при объявлении
значением 15.
•	В классе SnakeGame должен быть переопределен метод initialize() родительского класса Game.
•	В методе initialize() должен быть вызван метод setScreenSize(int, int) класса Game c параметрами WIDTH и HEIGHT.
•	В классе SnakeGame должен быть импорт всего содержимого пакета com.javarush.engine.cell.


level-2

Давай раскрасим игровое поле. Это можно сделать в методе initialize как и все остальные действия игры. Но "лепить"
все в один метод - плохая практика. Поэтому изначально создадим несколько необходимых методов, каждый из которых
будет отвечать за определенный кусок работы: метод drawScene - за отрисовку экрана, метод createGame - за действия,
которые нужно выполнить для создания игры. Исходя из этого нам нужно в методе initialize() вызвать метод createGame(),
в котором в свою очередь будет вызываться метод drawScene().

Чтобы окрасить ячейки игрового поля в определенный цвет нужно пройти по всем ячейкам (используй циклы) и для каждой
из них вызвать метод setCellColor.

Подсказка:

for (int x = 0; x < WIDTH; x++) {
    for (int y = 0; y < HEIGHT; y++) {
        setCellColor(x, y, Color);
    }
}
Требования:
•	В классе SnakeGame должен существовать private void метод createGame().
•	В классе SnakeGame должен существовать private void метод drawScene().
•	В методе createGame() должен быть вызван метод drawScene().
•	В методе initialize() должен быть вызван метод createGame().
•	В методе initialize() метод createGame() вызывается после метода setScreenSize(int, int).
•	В методе drawScene() для каждой ячейки игрового поля вызови метод setCellColor(int, int, Color) с параметрами:
координаты x и y и любой цвет. Например, Color.DARKSEAGREEN).


level-3

Для хранения объектов игрового поля нам понадобится дополнительный класс.

Объект этого класса будет хранить координаты соответствующей ячейки.

Назовем его GameObject.

Требования:
•	Должен существовать публичный класс GameObject.
•	В классе GameObject должно существовать публичное поле x типа int.
•	В классе GameObject должно существовать публичное поле y типа int.
•	В классе GameObject должен существовать один конструктор с двумя параметрами типа int,
который устанавливает соответствующие значения полям x и y.