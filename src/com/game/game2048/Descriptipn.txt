/**
 * //--module-path ./lib/javafx-sdk-16/lib --add-modules=javafx.controls,javafx.fxml,javafx.base
 */

level-1

Привет! Сегодня начнем писать одну интересную и "залипательную" игру — 2048. Готов? Тогда поехали.

Правила игры:

Игровое поле имеет форму квадрата. Размер стандартного поля — 4x4 плитки. Цель игры — получить плитку номиналом 2048.

В каждом раунде появляется плитка номиналом 2 (с вероятностью 90%) или 4 (с вероятностью 10%).
Можно сдвинуть все плитки игрового поля в одну из 4 сторон, нажав соответствующую клавишу: вверх, вниз, вправо или
влево. Если при сдвиге две плитки одного номинала "налетают" друг на друга, они "слипаются" в одну. Ее номинал равен
сумме соединившихся плиток. После каждого хода на свободной секции поля появляется новая плитка номиналом 2 или 4.
Если при нажатии клавиши местоположение плиток или их номинал не изменится, ход не совершается.
Если в одной строчке или столбце находится более двух плиток одного номинала, при сбрасывании они слипаются с той
стороны, в которую были направлены. Например, находящиеся в одной строке плитки (4, 4, 4, 0) после хода влево
превратятся в (8, 4, 0, 0), а после хода вправо — в (0, 0, 4, 8). Данная обработка неоднозначности позволяет
более точно формировать стратегию игры.
За каждое соединение игровые очки увеличиваются на номинал получившейся плитки.
Игра заканчивается поражением, если после очередного хода невозможно совершить действие.
Игра заканчивается победой, если на поле появится клетка номиналом 2048.
Теперь приступаем к реализации игры:

Для начала нам понадобится класс, в котором будет реализована логика игры. Давай назовем его Game2048.

Мы подготовили "игровой движок", где происходит запуск самой игры, перерисовка ее элементов и т.д.
Поэтому твой класс Game2048 должен наследоваться от класса Game.
Этот и другие классы движка находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться, класс Game2048
должен содержать такой импорт:
import com.javarush.engine.cell.*;

Попробуй запустить на выполнение свой класс Game2048 и посмотри, что получилось.

Также, советуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.

Требования:
•	Должен быть создан класс Game2048.
•	Класс Game2048 должен быть публичным.
•	Класс Game2048 должен быть наследником класса Game.
•	В классе Game2048 должен быть импорт всего содержимого пакета com.javarush.engine.cell.


level-2

Пробовал запускать свою программу? Игровое поле маленькое. Давай это исправим. Для этого нужно переопределить
метод initialize() родительского класса Game. Метод initialize() служит для того, чтобы ты сам мог задать
размер игрового поля, решить, отображать сетку или нет и т.д.

Чтобы задать размер игрового поля в методе initialize(), вызови метод setScreenSize(int width, int height)
родительского класса Game, в который передай ширину и высоту игрового поля. Как ты знаешь, размер игрового
поля в нашей игре — 4х4 плитки. Предлагаем создать private static final int переменную (константа) SIDE со
значением 4 и передать ее как параметры в метод setScreenSize(). Должно получиться что-то такое —
setScreenSize(SIDE, SIDE). Можешь снова запустить свою программу и посмотреть, что в итоге получилось.
Требования:
•	В классе Game2048 должен быть переопределен метод initialize() родительского класса Game.
•	В классе Game2048 должна быть создана переменная SIDE.
•	Переменная SIDE должна быть private, static, final и иметь тип int.
•	Переменная SIDE должна быть проинициализирована значением 4.
•	В методе initialize() должен быть вызван метод setScreenSize(SIDE, SIDE).


level-3

Игровой движок мы будем использовать для отображения текущего состояния игры. А для хранения состояния
отлично подойдет массив 4x4.

Поэтому создай поле int[][] gameField и инициализируй его при объявлении целочисленным массивом int[][]
размером SIDEхSIDE.

По умолчанию ячейки целочисленного массива инициализируются нулями. Пускай ноль обозначает пустую клетку игрового поля.

Требования:
•	В классе Game2048 должна быть создана приватная матрица (двумерный целочисленный массив) gameField с типом int[][].
•	Размер матрицы должен быть SIDEхSIDE.
•	В классе Game2048 должен быть создан приватный метод void createGame().
•	В методе initialize() должен быть вызван метод createGame().